#include "sweep.hpp"
#include "cover_test_utils.hpp"
#include "impl/boost_io.hpp"

#include <gtest/gtest.h>

#include <boost/geometry.hpp>
#include <boost/geometry/algorithms/equals.hpp>
#include <boost/geometry/io/wkt/read.hpp>

#include <algorithm>
#include <cmath>
#include <string>
#include <utility>
#include <vector>

using namespace cover;
namespace bg = boost::geometry;

TEST(append, generic) {
  const polygon pol0 = polygon::Random(2, 3);
  const bg_polygon bg0 = detail::to_boost<bg_point>(pol0);

  // Empty results in empty
  {
    bg_polygon empty;
    detail::append({}, empty);
    ASSERT_TRUE(boost::geometry::equals(empty, bg_polygon{}));
  }

  // Left empty results in right
  {
    bg_polygon copy = bg0;
    detail::append({}, copy);
    ASSERT_TRUE(boost::geometry::equals(copy, bg0));
  }

  // Right empty results in left
  {
    bg_polygon empty;
    detail::append(bg0, empty);
    ASSERT_TRUE(boost::geometry::equals(empty, bg0));
  }

  // Same is a noop
  {
    bg_polygon copy = bg0;
    detail::append(bg0, copy);
    ASSERT_TRUE(boost::geometry::equals(copy, bg0));
  }
}

TEST(append, simple) {
  polygon pol0(2, 3), pol1(2, 3);
  pol0 << 1, 2, 3, 3, 3, 2;

  const bg_polygon bg0 = detail::to_boost<bg_point>(pol0);

  // Small translation is ok -> they still overlap.
  {
    pol1 = Eigen::Isometry2d{Eigen::Rotation2Dd(0.1)} * pol0;
    bg_polygon bg1 = detail::to_boost<bg_point>(pol1);

    ASSERT_NO_THROW(detail::append(bg0, bg1));
  }

  // If they don't overlap, we throw.
  {
    pol1 = Eigen::Isometry2d(Eigen::Translation2d(100, 100)) * pol0;
    bg_polygon bg1 = detail::to_boost<bg_point>(pol1);

    ASSERT_ANY_THROW(detail::append(bg0, bg1));
  }
}

TEST(sweep, empty) {
  // If either of the arguments is empty, we return empty.
  ASSERT_TRUE(sweep({}, {}).empty());

  polygon pol(2, 3);
  pol << 1, 2, 3, 1, 2, -3;
  std::vector<Eigen::Isometry2d> poses{Eigen::Isometry2d::Identity()};
  ASSERT_TRUE(sweep(pol, {}).empty());
  ASSERT_TRUE(sweep({}, poses).empty());

  // Counter-test: both aren't empty
  ASSERT_FALSE(sweep(pol, poses).empty());
}

TEST(sweep, one) {
  // If the poses vector has just one pose, the output is just the transform of
  // the input.
  polygon p = polygon::Random(2, 3);
  Eigen::Isometry2d pose{Eigen::Rotation2Dd(1.2)};

  const auto result = sweep(p, {pose});
  const polygon expected =
      detail::from_boost(detail::to_boost<bg_point>(pose * p));
  ASSERT_EQ(result.size(), 1);
  ASSERT_EQ(result.front(), expected);
}

/// @brief Fixture which will load different footprints.
struct sweep_fixture : public testing::TestWithParam<std::tuple<int, int>> {};

static const std::vector<Eigen::Isometry2d> transforms = {
    Eigen::Isometry2d{Eigen::Rotation2Dd(1.4)},
    Eigen::Isometry2d{Eigen::Translation2d(0.5, 1.1)}};

static const std::vector<std::string> wkt_expected = {
    // rotated.
    // 0
    "POLYGON((-1.40989 -2.29455,-1.41089 -2.29525,-1.41132 -2.29397,-2.50095 "
    "0.999686,-2.50227 1.00369,-2.50177 1.00318,-2.50208 1.00454,-2.49926 "
    "1.00067,-1 -0.498586,-0.461875 0.0395394,-1.30871 1.23938,-1.31306 "
    "1.23921,-1.30971 1.24079,-1.31 1.24121,-1.30845 1.24138,1.40989 "
    "2.29455,1.41089 2.29525,2.50095 -0.999686,2.50227 -1.00369,2.50176 "
    "-1.00318,2.50208 -1.00454,2.49926 -1.00067,1 0.498586,0.461875 "
    "-0.0395394,1.30871 -1.23938,1.31306 -1.23921,1.30971 -1.24079,1.31 "
    "-1.24121,1.30845 -1.24138,-1.40989 -2.29455))",
    // 1
    "POLYGON((-2.31017 -1.63209,-2.31147 -1.63592,-2.31176 -1.63182,-2.31191 "
    "-1.63179,-2.001 2.00009,-2.00092 2.001,-2.00077 2.001,-1.99979 "
    "2.005,-1.99916 2.001,-1.68542 2.001,-1.63209 2.31017,-1.63592 "
    "2.31147,-1.63182 2.31176,-1.63179 2.31191,2.00009 2.001,2.001 "
    "2.00092,2.001 2.00077,2.005 1.99979,2.001 1.99916,2.001 1.68542,2.31017 "
    "1.63209,2.31147 1.63592,2.31176 1.63182,2.31191 1.63179,2.001 "
    "-2.00009,2.00092 -2.001,2.00077 -2.001,1.99979 -2.005,1.99916 "
    "-2.001,1.68542 -2.001,1.63209 -2.31017,1.63592 -2.31147,1.63182 "
    "-2.31176,1.63179 -2.31191,1.63088 -2.31183,-2.00009 -2.001,-2.001 "
    "-2.00092,-2.001 -2.00077,-2.005 -1.99979,-2.001 -1.99916,-2.001 "
    "-1.68542,-2.31017 -1.63209),(0.999 -1.18605,0.999 -1.001,0.843131 "
    "-1.001,0.816638 -1.1546,0.999 -1.18605))",
    // 2
    "POLYGON((2.31017 1.63209,2.31147 1.63592,2.31176 1.63182,2.31191 "
    "1.63179,2.001 -2.00009,2.00092 -2.001,2.00077 -2.001,1.99979 "
    "-2.005,1.99916 -2.001,1.68542 -2.001,1.63209 -2.31017,1.63592 "
    "-2.31147,1.63182 -2.31176,1.63179 -2.31191,1.63088 -2.31183,-2.00009 "
    "-2.001,-2.001 -2.00092,-2.001 -2.00077,-2.005 -1.99979,-2.001 "
    "-1.99916,-2.001 -1.68542,-2.3106 -1.63202,-2.31201 -1.63302,-2.31191 "
    "-1.63179,-2.31191 -1.63179,-2.001 2.00009,-2.00081 2.00223,-2.00054 "
    "2.00195,-1.99979 2.005,-1.99908 2.00049,-0.00755233 0.00896654,-1.63161 "
    "2.31001,-1.63592 2.31147,-1.6328 2.31169,-1.63302 2.31201,2.00009 "
    "2.001,2.001 2.00092,2.00223 2.00081,2.001 1.99959,2.001 1.68542,2.31017 "
    "1.63209),(1.499 -1.77968,1.499 0.997586,0.461875 -0.0395394,0.493056 "
    "-0.0837185,0.496683 -0.0819287,0.493986 -0.0850368,0.494071 "
    "-0.085157,0.000644218 -0.500765,-5.79466e-05 -0.501356,-0.000162119 "
    "-0.501252,-0.00368323 -0.503381,-0.00130291 -0.500111,-0.0395395 "
    "-0.461875,-1.23785 -1.30763,1.499 -1.77968))",
    // 3
    "POLYGON((0.000541468 -0.000873603,-0.0001324 -0.00154661,-0.000388194 "
    "-0.00118419,-0.000810089 -0.00132412,-0.000952721 -0.000384343,-0.0410149 "
    "0.056377,-0.0973797 0.0165962,-0.0333629 -0.195717,0.294359 "
    "-0.050462,0.0844192 0.491414,-0.787062 0.135424,-0.220402 "
    "-1.27978,2.06814 -0.356377,0.577334 3.34923,-5.4196 0.933892,-5.41965 "
    "0.933874,-5.42377 0.93156,-5.42284 0.932744,-5.42426 0.932242,-5.42063 "
    "0.935571,-5.42063 0.935571,-5.42062 0.935584,-5.4206 0.935598,1.15461 "
    "6.70136,1.1532 6.70534,1.15585 6.70245,1.15588 6.70248,1.15654 "
    "6.7017,6.80076 0.000644218,6.80151 -0.000241948,6.80141 "
    "-0.000305503,6.80357 -0.00350018,6.79999 -0.00118068,0.000588913 "
    "-4.20081,-0.000241041 -4.20151,-0.000391095 -4.20127,-0.00404999 "
    "-4.20293,-0.00124539 -4.19989,-2.60081 -0.000590618,-2.60151 "
    "0.000243418,-2.60127 0.000393444,-2.60293 0.00404851,-2.59989 "
    "0.00124366,-0.000586504 1.60081,0.000237211 1.60151,0.000388227 "
    "1.60127,0.00405239 1.60293,0.00124808 1.59989,1.00081 0.000588063,1.00152 "
    "-0.000253568,1.00128 -0.000401096,1.00294 -0.0040422,0.999882 "
    "-0.00123703,0.000581985 -0.600817,-0.000211467 -0.601486,-0.000367697 "
    "-0.601251,-0.00406878 -0.602906,-0.0012666 -0.599903,-0.400798 "
    "-0.000605556,-0.401583 0.000326712,-0.401316 0.00046021,-0.403002 "
    "0.0039985,-0.399851 0.00119233,-0.000553229 0.200841,5.79466e-05 "
    "0.201356,0.000243353 0.201171,0.00417731 0.202748,0.00141404 0.2,0.150625 "
    "0.0507891,0.152356 0.0497311,0.151715 0.0495176,0.153928 "
    "0.046906,0.149926 0.0489213,0.000541468 -0.000873603))",
    // 4
    "POLYGON((0.54833 -0.651,0.449607 -1.22338,0.451954 -1.22424,0.449353 "
    "-1.22486,0.449262 -1.22539,0.44842 -1.22508,0.375272 -1.24252,0.365318 "
    "-1.30024,0.356688 -1.35027,0.346609 -1.40871,0.350258 -1.41078,0.34633 "
    "-1.41033,0.346262 -1.41072,0.345192 -1.41019,0.118681 -1.37112,-0.114737 "
    "-1.33086,-0.114737 -1.33086,-0.334626 -1.29294,-0.569235 "
    "-1.25247,-0.569235 -1.25247,-0.571134 -1.25215,-0.571645 "
    "-1.25206,-0.796802 -1.21322,-0.797358 -1.21645,-0.798576 "
    "-1.21235,-0.926824 -0.780653,-1.33044 -0.580896,-1.33428 -0.579,-1.331 "
    "-0.579,-1.331 0.579855,-1.33134 0.581,-1.33094 0.581,-1.33072 "
    "0.584948,-1.3293 0.581,-1.16066 0.581,-1.13104 0.650118,-1.1312 "
    "0.651,-1.13066 0.651,-1.12961 0.653458,-1.12916 0.651,-0.54833 "
    "0.651,-0.439391 1.28261,-0.443099 1.2845,-0.439114 1.28422,-0.439059 "
    "1.28454,-0.438012 1.28413,0.842003 1.06336,0.84273 1.06721,0.843636 "
    "1.06308,0.843647 1.06308,0.843783 1.06241,0.904696 0.762015,1.19036 "
    "0.650932,1.191 0.650684,1.191 0.650672,1.19491 0.649078,1.191 "
    "0.649016,1.191 -0.649899,1.19122 -0.651,1.1909 -0.651,1.1905 "
    "-0.654975,1.18927 -0.651,0.54833 -0.651))",
    // 5.
    "POLYGON((0.142942 0.828763,0.170628 0.823988,0.169352 0.826691,0.172763 "
    "0.82362,0.172886 0.823599,0.173123 0.823295,0.18243 0.81141,0.263594 "
    "0.778097,0.262595 0.779971,0.266292 0.77699,0.266468 0.776918,0.266561 "
    "0.776763,0.333637 0.716809,0.333388 0.717437,0.336792 0.713989,0.336941 "
    "0.713855,0.336966 0.713801,0.377216 0.668394,0.377005 0.670074,0.379363 "
    "0.665972,0.379466 0.665855,0.4532 0.466012,0.454242 0.464277,0.492778 "
    "0.415062,0.516394 0.388973,0.534728 0.368721,0.535551 0.36801,0.53626 "
    "0.367399,0.720501 0.260866,0.720663 0.260772,0.720761 0.26065,0.724402 "
    "0.257629,0.722783 0.258122,0.760688 0.210741,0.760738 0.210707,0.760843 "
    "0.210538,0.763663 0.206597,0.763087 0.206948,0.810768 0.130659,0.810904 "
    "0.130541,0.810946 0.130354,0.813255 0.126205,0.811578 0.127508,0.83061 "
    "0.0418625,0.840741 0.0306711,0.841 0.0303854,0.841 0.0302606,0.843447 "
    "0.0263777,0.841 0.0280948,0.841 -0.00273951,0.841 -0.0296551,0.841333 "
    "-0.0300808,0.841 -0.0304142,0.841 -0.0328991,0.839909 -0.0315054,0.830913 "
    "-0.0405013,0.811063 -0.129827,0.811173 -0.13001,0.810939 "
    "-0.130384,0.810433 -0.132663,0.809983 -0.131914,0.761134 "
    "-0.210073,0.761166 -0.210143,0.760817 -0.21058,0.759865 "
    "-0.212103,0.759768 -0.211891,0.721134 -0.260184,0.721248 "
    "-0.260494,0.720644 -0.260796,0.719675 -0.262007,0.719448 "
    "-0.261394,0.661195 -0.29052,0.66121 -0.290569,0.66042 -0.290908,0.659378 "
    "-0.291429,0.659358 -0.291363,0.591144 -0.320598,0.591173 "
    "-0.320738,0.590321 -0.320951,0.589268 -0.321402,0.589231 "
    "-0.321223,0.511092 -0.340758,0.511119 -0.341,0.510123 -0.341,0.509134 "
    "-0.341247,0.509106 -0.341,0.266794 -0.341,0.266714 -0.341195,0.266518 "
    "-0.341187,0.203235 -0.419782,0.204021 -0.419985,0.202154 "
    "-0.421125,0.201858 -0.421492,0.201644 -0.421436,0.112798 "
    "-0.475668,0.113076 -0.475809,0.111216 -0.476633,0.110794 "
    "-0.476891,0.11072 -0.476853,0.0137675 -0.519825,0.0148079 "
    "-0.520662,0.0120594 -0.520582,0.01171 -0.520737,0.011497 "
    "-0.520566,-0.0564312 -0.518602,-0.0560275 -0.519029,-0.0589192 "
    "-0.51853,-0.0592617 -0.518521,-0.0593173 -0.518462,-0.0858532 "
    "-0.513885,-0.0885529 -0.513419,-0.0889126 -0.513357,-0.115641 "
    "-0.508747,-0.115262 -0.509254,-0.118187 -0.508308,-0.118509 "
    "-0.508253,-0.118556 -0.508189,-0.183287 -0.487261,-0.182166 "
    "-0.489535,-0.185725 -0.486473,-0.185911 -0.486413,-0.186028 "
    "-0.486203,-0.261695 -0.414458,-0.261364 -0.415568,-0.264452 "
    "-0.411844,-0.264598 -0.411704,-0.264619 -0.411639,-0.329637 "
    "-0.331428,-0.32962 -0.333471,-0.331515 -0.329112,-0.33163 "
    "-0.32897,-0.331645 -0.328789,-0.344999 -0.290589,-0.380374 "
    "-0.270936,-0.380549 -0.270891,-0.38067 -0.270753,-0.384643 "
    "-0.268145,-0.382633 -0.268509,-0.450626 -0.190804,-0.450687 "
    "-0.190772,-0.450799 -0.190604,-0.453945 -0.186928,-0.452907 "
    "-0.187443,-0.510747 -0.100683,-0.510934 -0.100532,-0.510962 "
    "-0.100338,-0.513374 -0.0963104,-0.511324 -0.0978017,-0.520945 "
    "-0.0304562,-0.521 -0.030398,-0.521 -0.0300708,-0.521435 -0.0270281,-0.521 "
    "-0.0274877,-0.521 0.0296672,-0.521048 0.029732,-0.521 0.030071,-0.521 "
    "0.0330057,-0.520648 0.0325351,-0.511037 0.0998087,-0.51117 "
    "0.100048,-0.510958 0.100366,-0.510569 0.103088,-0.509922 "
    "0.10192,-0.451096 0.190159,-0.451121 0.190238,-0.450796 "
    "0.190609,-0.449667 0.192303,-0.449574 0.192005,-0.381031 0.27034,-0.38105 "
    "0.270561,-0.380638 0.27079,-0.379197 0.272436,-0.379131 "
    "0.271627,-0.290924 0.320631,-0.290897 0.320825,-0.290692 "
    "0.320871,-0.249507 0.559657,-0.249746 0.559727,-0.249334 "
    "0.56066,-0.249165 0.561641,-0.248931 0.561573,-0.216399 "
    "0.635255,-0.216569 0.635321,-0.215946 0.636282,-0.215591 "
    "0.637086,-0.215458 0.637034,-0.175054 0.699287,-0.175116 "
    "0.699317,-0.174425 0.700256,-0.173958 0.700976,-0.173912 "
    "0.700954,-0.135308 0.753409,-0.135874 0.753736,-0.134516 "
    "0.754485,-0.134115 0.755029,-0.133829 0.754864,-0.0796724 "
    "0.784728,-0.0798645 0.784859,-0.0782019 0.785538,-0.0777123 "
    "0.785808,-0.0776484 0.785765,0.00767597 0.820619,0.00701456 "
    "0.821189,0.00934576 0.821301,0.009754 0.821467,0.00991581 "
    "0.821328,0.101316 0.825707,0.11171 0.833043,0.110522 0.834355,0.112971 "
    "0.833933,0.113356 0.834205,0.113719 0.833804,0.142942 0.828763))",
    // 6
    "POLYGON((-0.022696 0.520769,-0.0255082 0.522945,-0.0227669 "
    "0.522472,-0.0228048 0.523382,-0.0213012 0.522219,0.194071 "
    "0.485072,0.194041 0.487982,0.195966 0.484351,0.313003 0.263639,0.510612 "
    "0.110791,0.511 0.110491,0.512312 0.109476,0.511 0.109193,0.511 "
    "-0.109751,0.511523 -0.110738,0.511 -0.110834,0.511 -0.11402,0.50946 "
    "-0.111115,0.202679 -0.167234,0.204519 -0.348837,0.696179 "
    "-0.433637,0.696915 -0.433399,0.697031 -0.433784,0.700419 "
    "-0.434368,0.697492 -0.435314,0.729293 -0.540782,0.733502 "
    "-0.541202,0.72977 -0.542365,0.729792 -0.542437,-0.409771 "
    "-0.810973,-0.410835 -0.811224,-0.410848 -0.811133,-0.414701 "
    "-0.811703,-0.411083 -0.809494,-0.510933 -0.110543,-0.512312 "
    "-0.109476,-0.511122 -0.109219,-0.511339 -0.1077,-0.509756 "
    "-0.108924,-0.00103415 0.000799944,-0.022696 0.520769))",
    // translated figures.
    // 0.
    "POLYGON((-2.50079 0.999381,-2.5012 0.999783,-2.50113 0.999936,-2.50113 "
    "0.999936,-2.50091 1.00041,-2.00091 2.10041,-2.00031 2.10173,-2.00012 "
    "2.10215,-1.9992 2.10062,-0.5 0.601414,1.49916 2.60058,1.49988 "
    "2.60215,1.50021 2.60159,1.50285 2.60411,1.50112 2.60008,3.00079 "
    "0.100619,3.0012 0.100217,3.00113 0.100064,3.00113 0.100064,2.50091 "
    "-1.00041,2.50031 -1.00173,2.50012 -1.00215,2.4992 -1.00062,1 "
    "0.498586,-0.999164 -1.50058,-0.999878 -1.50215,-1.00021 -1.50159,-1.00285 "
    "-1.50411,-1.00112 -1.50008,-2.50079 0.999381))",
    // 1.
    "POLYGON((-2.001 1.999,-2.00155 1.999,-2.001 2.00022,-2.001 "
    "2.00022,-1.50091 3.10041,-1.499 3.10462,-1.499 3.101,2.49936 3.101,2.501 "
    "3.10462,2.501 3.101,2.50155 3.101,2.501 3.09978,2.501 -0.899,2.50155 "
    "-0.899,2.00091 -2.00041,2.00064 -2.001,1.999 -2.00462,1.999 "
    "-2.001,1.00064 -2.001,0.999 -2.00462,0.999 -2.001,0.998447 -2.001,0.999 "
    "-1.99978,0.999 -1.001,-0.54481 -1.001,-0.99909 -2.00041,-0.999356 "
    "-2.001,-1.001 -2.00462,-1.001 -2.001,-1.99936 -2.001,-2.001 "
    "-2.00462,-2.001 -2.001,-2.00155 -2.001,-2.001 -1.99978,-2.001 1.999))",
    // 2.
    "POLYGON((2.501 -0.899,2.50155 -0.899,2.00091 -2.00041,2.00064 "
    "-2.001,1.999 -2.00462,1.999 -2.001,1.50064 -2.001,1.499 -2.00462,1.499 "
    "-2.001,1.49845 -2.001,1.499 -1.99978,1.499 0.997586,0.000835139 "
    "-0.500579,0.000313249 -0.501727,-1.55222e-05 -0.501399,-0.00284797 "
    "-0.50411,-0.00118541 -0.500229,-0.999 0.497586,-0.999 -0.899,-0.998447 "
    "-0.899,-1.49909 -2.00041,-1.501 -2.00462,-1.501 -2.001,-1.99936 "
    "-2.001,-2.001 -2.00462,-2.001 -2.001,-2.00155 -2.001,-2.001 "
    "-1.99978,-2.001 1.99959,-2.0012 1.99978,-2.001 2.00022,-2.001 "
    "2.00022,-1.50091 3.10041,-1.499 3.10462,-1.499 3.10041,0.5 "
    "1.10141,2.49916 3.10058,2.501 3.10462,2.501 3.10234,2.50285 3.10411,2.501 "
    "3.09979,2.501 -0.899))",
    // 3
    "POLYGON((0.185411 -0.489919,0.500324 -0.998624,3.04468 0.572887,-0.000761 "
    "5.49933,-0.00123064 5.49971,0.49909 6.60041,0.499865 6.60212,0.500762 "
    "6.60067,7.30008 1.10122,7.30227 1.10258,6.80091 -0.000413803,6.80038 "
    "-0.00159004,6.79992 -0.0012239,0.000784376 -4.20069,0.000135438 "
    "-4.20212,-0.000324418 -4.20138,-0.00227002 -4.20258,-0.00113141 "
    "-4.20007,-2.60033 -0.00137432,-2.60227 -0.00256866,-2.60091 "
    "0.000413803,-2.10091 1.10041,-2.10078 1.10069,-2.10014 1.10212,-2.09968 "
    "1.10137,0.499215 2.70069,0.499861 2.70211,0.500322 2.70137,0.502266 "
    "2.70257,0.501133 2.70007,1.50033 1.10136,1.50224 1.10251,1.00091 "
    "-0.000413803,1.00014 -0.00210988,0.999673 -0.00136254,0.185411 "
    "-0.489919),(-0.0527504 0.766364,-0.44345 0.525934,-0.281184 "
    "0.263812,-0.0527504 0.766364))",
    // 4.
    "POLYGON((-1.12936 -0.651,-1.13003 -0.652476,-1.13066 -0.651,-1.13155 "
    "-0.651,-1.13109 -0.649988,-1.16066 -0.581,-1.32936 -0.581,-1.331 "
    "-0.584617,-1.331 -0.581,-1.33155 -0.581,-1.331 -0.579784,-1.331 "
    "0.579,-1.33155 0.579,-1.331 0.580217,-0.83091 1.68041,-0.830644 "
    "1.681,-0.830644 1.681,-0.829 1.68462,-0.829 1.681,-0.662462 "
    "1.681,-0.63091 1.75041,-0.630644 1.751,-0.630498 1.751,-0.627981 "
    "1.75457,-0.628772 1.751,1.68936 1.751,1.691 1.75462,1.691 1.751,1.69155 "
    "1.751,1.691 1.74978,1.691 0.451,1.69155 0.451,1.19091 -0.650414,1.189 "
    "-0.654617,1.189 -0.651,-1.12936 -0.651))",
    // 5.
    "POLYGON((1.33969 1.13173,1.341 1.13462,1.341 1.13041,1.3412 1.13022,1.341 "
    "1.12978,1.341 1.09978,1.341 1.07234,1.34285 1.07411,1.341 1.0698,1.341 "
    "1.06978,1.32574 1.0362,1.31187 0.97381,1.31236 0.974405,1.31099 "
    "0.969863,1.31098 0.969783,1.31095 0.969681,0.81091 -0.130414,0.810883 "
    "-0.130474,0.810788 -0.130625,0.808415 -0.134742,0.808463 "
    "-0.134345,0.760883 -0.210474,0.760859 -0.210527,0.720859 "
    "-0.260527,0.720764 -0.260736,0.7206 -0.260818,0.717384 -0.264261,0.718203 "
    "-0.262017,0.660764 -0.290736,0.66075 -0.290767,0.66042 -0.290908,0.657921 "
    "-0.292158,0.658022 -0.291936,0.59075 -0.320766,0.590711 "
    "-0.320853,0.590321 -0.320951,0.588022 -0.321936,0.588232 "
    "-0.321473,0.510711 -0.340853,0.510644 -0.341,0.510123 -0.341,0.508232 "
    "-0.341473,0.508447 -0.341,-0.199356 -0.341,-0.199425 -0.341152,-0.20011 "
    "-0.341,-0.201553 -0.341,-0.201421 -0.340709,-0.289425 -0.321152,-0.289538 "
    "-0.321401,-0.290359 -0.320945,-0.291421 -0.320709,-0.291292 "
    "-0.320426,-0.379538 -0.271401,-0.379731 -0.271826,-0.380638 "
    "-0.27079,-0.381292 -0.270426,-0.381177 -0.270173,-0.449731 "
    "-0.191825,-0.449834 -0.192052,-0.450796 -0.190609,-0.451177 "
    "-0.190173,-0.45114 -0.190092,-0.509834 -0.102052,-0.510506 "
    "-0.10353,-0.510958 -0.100366,-0.51114 -0.100092,-0.511031 "
    "-0.0998522,-0.520506 -0.0335295,-0.521 -0.0346166,-0.521 "
    "-0.0300711,-0.521031 -0.0298522,-0.521 -0.0297833,-0.521 "
    "0.0259636,-0.521402 0.0252007,-0.521 0.0300209,-0.521 0.0302166,-0.52097 "
    "0.0302833,-0.511475 0.096746,-0.512429 0.0956297,-0.510984 "
    "0.100181,-0.51097 0.100283,-0.0108769 1.20049,-0.0108514 "
    "1.20053,-0.00859775 1.2048,-0.00868296 1.20378,0.0491233 "
    "1.29049,0.0491505 1.29055,0.0496507 1.29112,0.0524292 1.29437,0.0523917 "
    "1.29425,0.11915 1.37055,0.119226 1.37071,0.119392 1.37081,0.12271 "
    "1.3742,0.121937 1.37222,0.209226 1.42071,0.209296 1.42087,0.209641 "
    "1.42094,0.212165 1.42235,0.21174 1.42141,0.299296 1.44087,0.299356 "
    "1.441,0.29989 1.441,0.30174 1.44141,0.301553 1.441,1.00936 1.441,1.00943 "
    "1.44117,1.01012 1.441,1.01155 1.441,1.01141 1.44068,1.08943 "
    "1.42117,1.08949 1.4213,1.09032 1.42095,1.09141 1.42068,1.09133 "
    "1.42052,1.15949 1.3913,1.15952 1.39136,1.16042 1.39091,1.16133 "
    "1.39052,1.16131 1.39046,1.21952 1.36136,1.21976 1.3619,1.22064 "
    "1.3608,1.22131 1.36046,1.22116 1.36015,1.25976 1.3119,1.25986 "
    "1.31211,1.26082 1.31058,1.26116 1.31015,1.26113 1.31007,1.30986 "
    "1.23211,1.31033 1.23314,1.31094 1.23038,1.31113 1.23007,1.31105 "
    "1.22989,1.33091 1.1405,1.33969 1.13173))",
    // 6.
    "POLYGON((1.0093 1.21087,1.011 1.21462,1.011 1.21124,1.01173 1.2114,1.011 "
    "1.20978,1.011 0.991199,1.0117 0.991328,0.51091 -0.110414,0.509 "
    "-0.114617,0.509 -0.1112,-0.0614219 -0.215545,-0.30909 -0.760414,-0.311 "
    "-0.764617,-0.311 -0.761618,-0.409236 -0.810736,-0.410506 "
    "-0.81353,-0.410794 -0.811515,-0.412079 -0.812158,-0.411031 "
    "-0.809852,-0.510838 -0.111204,-0.511733 -0.111397,-0.0109104 "
    "0.990414,-0.0107023 0.990872,-0.0107021 0.990872,-0.00949408 "
    "0.99353,-0.00916183 0.991204,1.0093 1.21087))"};

INSTANTIATE_TEST_CASE_P(/**/, sweep_fixture,
                        testing::Combine(testing::Range(0, 2),
                                         testing::Range(0, 7)));

TEST_P(sweep_fixture, rotate) {
  // Parsing fails for number 5
  const auto p = GetParam();
  const auto i0 = std::get<0>(p);
  const auto i1 = std::get<1>(p);

  // Load the footprint.
  const polygon footprint = make_footprint(footprints.at(i1));

  // Create two poses.
  std::vector<Eigen::Isometry2d> poses(2);
  poses.at(0) = Eigen::Isometry2d{Eigen::Translation2d(0, 0)};
  poses.at(1) = transforms.at(i0);

  // Convert the input to boost.
  std::vector<bg_polygon> bgs(poses.size());
  std::transform(poses.begin(), poses.end(), bgs.begin(),
                 [&](const Eigen::Isometry2d& _pose) {
                   return detail::to_boost<bg_point>(_pose * footprint);
                 });

  // Run the operation.
  const auto result = detail::linear_sweep(bgs.at(0), bgs.at(1));

  // Read the expected result and compare the area diff.
  bg_polygon exp;
  bg::read_wkt<bg_polygon>(wkt_expected.at(i0 * footprints.size() + i1), exp);
  std::vector<bg_polygon> diffs;
  bg::difference(result, exp, diffs);

  // Sum up the area of the diffs. Abs since the area might be negative
  // (unlikely).
  double area = 0;
  for (const auto& diff : diffs)
    area += std::abs(bg::area(diff));

  // The error should be small.
  ASSERT_LE(area, 1e-4);
}

/// @brief Fixture for linear interpolation
struct linear_interpolation_fixture : public testing::TestWithParam<double> {
  linear_interpolation_fixture() :
      t0{5, 3},
      t1{3, 5},
      r0{M_PI_4},
      r1{-M_PI_4},
      lin_itp{Eigen::Isometry2d{t0 * r0}, Eigen::Isometry2d{t1 * r1}} {}

  // Start and end transforms
  const Eigen::Translation2d t0;
  const Eigen::Translation2d t1;
  const Eigen::Rotation2Dd r0;
  const Eigen::Rotation2Dd r1;

  // Linear interpolant
  const cover::interpolation::LinearStrategy lin_itp;
};

INSTANTIATE_TEST_CASE_P(/**/, linear_interpolation_fixture,
                        testing::Range(0.0, 1.0, 0.1));

/**
 * @brief Given 2 isometries, the translation and rotation should change
 * linearly
 */
TEST_P(linear_interpolation_fixture, simple) {
  // Get the parametric coordinate
  const auto t = GetParam();

  // Evaluate the interpolation function
  const Eigen::Isometry2d result = lin_itp(t);
  const Eigen::Translation2d res_translation =
      Eigen::Translation2d{result.translation()};
  const Eigen::Rotation2Dd res_rotation = Eigen::Rotation2Dd{result.rotation()};

  // Check if the extracted values are as expected
  ASSERT_TRUE(res_translation.isApprox(Eigen::Translation2d(
      ((1 - t) * t0.translation() + t * t1.translation()))));
  ASSERT_TRUE(res_rotation.isApprox(r0.slerp(t, r1)));
}

/**
 * @brief Case where the step size in both translation and rotation is 0. This
 * should result in non-zero step size
 */
TEST(translation_rotation_strategy, invalid) {
  const cover::stepping::TransRotStrategy strategy(0, 0);

  const Eigen::Isometry2d i0 = Eigen::Isometry2d{};
  const Eigen::Isometry2d i1 = Eigen::Isometry2d{};

  ASSERT_EQ(strategy.get_steps(i0, i1), 1);
}

// t_step, a_step, t0, t1, r0, r1, check norm against trans or rot
using trf_param_t = std::tuple<double, double, Eigen::Vector2d, Eigen::Vector2d,
                               double, double, bool>;

struct translation_rotation_stepping_fixture
    : public testing::TestWithParam<trf_param_t> {
  translation_rotation_stepping_fixture() :
      strategy{std::get<0>(GetParam()), std::get<1>(GetParam())},
      i0{Eigen::Translation2d{std::get<2>(GetParam())} *
         Eigen::Rotation2Dd{std::get<4>(GetParam())}},
      i1{Eigen::Translation2d{std::get<3>(GetParam())} *
         Eigen::Rotation2Dd{std::get<5>(GetParam())}},
      check_trans(std::get<6>(GetParam())) {}

  double
  get_norm() const {
    if (check_trans) {
      return (std::get<2>(GetParam()) - std::get<3>(GetParam())).norm();
    }
    return [&]() {
      const auto angle =
          std::abs(std::get<4>(GetParam()) - std::get<5>(GetParam()));
      return angle < M_PI ? angle : 2 * M_PI - angle;
    }();
  }

  double
  get_step_size() const {
    if (check_trans) {
      return std::get<0>(GetParam());
    }
    return std::get<1>(GetParam());
  }

  const cover::stepping::TransRotStrategy strategy;
  const Eigen::Isometry2d i0;
  const Eigen::Isometry2d i1;
  bool check_trans;
};

INSTANTIATE_TEST_CASE_P(
    /**/, translation_rotation_stepping_fixture,
    testing::Values<trf_param_t>(
        trf_param_t{0.5, 0, {2, 3}, {7, 11}, 0, 0, true},
        trf_param_t{0, 0.5, {0, 0}, {0, 0}, -3 * M_PI_4, M_PI_2, false},
        trf_param_t{0.1, 1.0, {0, 0}, {1, 1}, 0, M_PI_4, true},
        trf_param_t{1.0, 0.1, {0, 0}, {1, 1}, 0, M_PI_4, false}));

TEST_P(translation_rotation_stepping_fixture, simple) {
  const auto n_steps = strategy.get_steps(i0, i1);

  // The computed bounds should be tight. n_steps should lie right on the  edge
  // i.e decreasing the step size just by one should make the computed step
  // bigger than the t_step / a_step depending upon which one is dominant
  const auto norm = get_norm();
  const auto step_size = get_step_size();

  ASSERT_LE(norm / n_steps, step_size);
  ASSERT_GT(norm / (n_steps - 1), step_size);
}
